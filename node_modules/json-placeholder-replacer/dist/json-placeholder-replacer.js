"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class JsonPlaceholderReplacer {
    constructor() {
        this.variablesMap = [];
    }
    addVariableMap(variableMap) {
        if (typeof variableMap == 'string') {
            this.variablesMap.push(JSON.parse(variableMap));
        }
        else {
            this.variablesMap.push(variableMap);
        }
        return this;
    }
    replace(json) {
        return this.replaceChildren(json);
    }
    replaceChildren(node) {
        for (const key in node) {
            const attribute = node[key];
            if (typeof attribute == 'object') {
                node[key] = this.replaceChildren(attribute);
            }
            else if (attribute !== undefined) {
                node[key] = this.replaceValue(attribute.toString());
            }
        }
        return node;
    }
    replaceValue(node) {
        const placeHolderIsInsideStringContext = !/^{{[^}}]+}}$|^<<[^>>]+>>$/.test(node);
        const getReplacer = () => {
            return (placeHolder) => {
                const path = placeHolder.substr(2, placeHolder.length - 4);
                const mapCheckResult = this.checkInEveryMap(path);
                if (mapCheckResult !== undefined) {
                    if (placeHolderIsInsideStringContext) {
                        const parsed = JSON.parse(mapCheckResult);
                        if (typeof parsed === 'object') {
                            return JSON.stringify(parsed);
                        }
                        return parsed;
                    }
                    return mapCheckResult;
                }
                else {
                    return placeHolder;
                }
            };
        };
        const output = node.replace(/({{[^}}]+}})|(<<[^>>]+>>)/g, getReplacer());
        try {
            return JSON.parse(output);
        }
        catch (exc) {
            return output;
        }
    }
    checkInEveryMap(path) {
        let result = undefined;
        this.variablesMap.forEach(map => result = this.navigateThroughMap(map, path));
        return result;
    }
    navigateThroughMap(map, path) {
        if (map === undefined) {
            return;
        }
        const shortCircuit = map[path];
        if (shortCircuit !== undefined) {
            // if (isNaN(shortCircuit)) {
            //     return shortCircuit;
            // }
            return JSON.stringify(shortCircuit);
        }
        let keys = path.split('.');
        const key = keys[0];
        keys.shift();
        return this.navigateThroughMap(map[key], keys.join('.'));
    }
}
exports.JsonPlaceholderReplacer = JsonPlaceholderReplacer;
