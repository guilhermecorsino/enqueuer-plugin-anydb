"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = require("../loggers/logger");
const dynamic_modules_manager_1 = require("../plugins/dynamic-modules-manager");
class MultiTestsOutput {
    constructor(outputs) {
        this.outputs = [];
        (outputs || []).forEach((output) => {
            logger_1.Logger.debug(`Instantiating output '${output.type}' and format '${output.format}'`);
            const publisher = dynamic_modules_manager_1.DynamicModulesManager.getInstance()
                .getProtocolManager().createPublisher(output);
            publisher.formatter = dynamic_modules_manager_1.DynamicModulesManager.getInstance()
                .getReportFormatterManager().createReportFormatter(output.format);
            publisher.format = output.format;
            this.outputs.push(publisher);
        });
    }
    publishReport(report) {
        return __awaiter(this, void 0, void 0, function* () {
            yield Promise.all(this.outputs
                .map(publisher => {
                try {
                    const formatter = publisher.formatter;
                    logger_1.Logger.trace(`Formatting as ${publisher.format}`);
                    publisher.payload = formatter.format(report);
                    return publisher.publish();
                }
                catch (err) {
                    logger_1.Logger.warning(`Error publishing report: ${JSON.stringify(report)}: ${err}`);
                }
            }));
        });
    }
}
exports.MultiTestsOutput = MultiTestsOutput;
