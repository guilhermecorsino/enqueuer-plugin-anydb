"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class TestsFlattener {
    flatten(node) {
        const iterationCounter = (node.totalIterations > 1) ? ` [${node.iteration}]` : '';
        const name = node.name + iterationCounter;
        return this.goDeep(Object.assign({}, node, { name }), [name]);
    }
    goDeep(node, hierarchy) {
        const tests = this.getTests(node, hierarchy);
        const nested = this.deepTests(node, hierarchy);
        return tests.concat(nested);
    }
    deepTests(node, hierarchy) {
        return (node.subscriptions || [])
            .concat(node.publishers || [])
            .concat(node.requisitions || [])
            .reduce((acc, component) => {
            const iterationCounter = (component.totalIterations > 1) ? ` [${component.iteration}]` : '';
            const name = component.name + iterationCounter;
            return acc.concat(this.goDeep(Object.assign({}, component, { name }), hierarchy.concat(name)));
        }, []);
    }
    getTests(node, hierarchy) {
        if (!node.hooks) {
            return [];
        }
        return Object.keys(node.hooks)
            .reduce((acc, hookName) => acc
            .concat(node.hooks[hookName].tests
            .map((test) => {
            return Object.assign({}, test, { hierarchy: hierarchy.concat(hookName) });
        })), []);
    }
}
exports.TestsFlattener = TestsFlattener;
