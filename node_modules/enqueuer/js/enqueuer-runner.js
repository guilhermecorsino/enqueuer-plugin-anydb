"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = require("./loggers/logger");
const multi_tests_output_1 = require("./outputs/multi-tests-output");
const date_controller_1 = require("./timers/date-controller");
const requisition_file_pattern_parser_1 = require("./requisition-runners/requisition-file-pattern-parser");
const requisition_runner_1 = require("./requisition-runners/requisition-runner");
const configuration_1 = require("./configurations/configuration");
const requisition_adopter_1 = require("./components/requisition-adopter");
const notification_emitter_1 = require("./notifications/notification-emitter");
const summary_test_output_1 = require("./outputs/summary-test-output");
class EnqueuerRunner {
    constructor() {
        this.startTime = new date_controller_1.DateController();
        notification_emitter_1.NotificationEmitter.on(notification_emitter_1.Notifications.REQUISITION_RAN, (report) => EnqueuerRunner.printReport(report));
    }
    execute() {
        return __awaiter(this, void 0, void 0, function* () {
            const configuration = configuration_1.Configuration.getInstance();
            logger_1.Logger.setLoggerLevel('info');
            logger_1.Logger.info('Rocking and rolling');
            logger_1.Logger.setLoggerLevel(configuration.getLogLevel());
            const requisitionFileParser = new requisition_file_pattern_parser_1.RequisitionFilePatternParser(configuration.getFiles());
            const requisitions = requisitionFileParser.parse();
            this.enqueuerRequisition = new requisition_adopter_1.RequisitionAdopter({
                requisitions,
                name: EnqueuerRunner.reportName,
                timeout: -1,
                parallel: configuration.isParallel()
            }).getRequisition();
            const parsingErrors = requisitionFileParser.getFilesErrors();
            const finalReports = yield new requisition_runner_1.RequisitionRunner(this.enqueuerRequisition).run();
            yield this.publishReports(configuration.getOutputs(), finalReports, parsingErrors);
            return finalReports;
        });
    }
    publishReports(configurationOutputs, finalReports, parsingErrors) {
        return __awaiter(this, void 0, void 0, function* () {
            logger_1.Logger.info('Publishing reports');
            const valid = parsingErrors.length === 0;
            const outputs = new multi_tests_output_1.MultiTestsOutput(configurationOutputs);
            yield finalReports.map((report) => __awaiter(this, void 0, void 0, function* () {
                report.hooks.onParsed = {
                    valid: valid,
                    tests: parsingErrors
                };
                report.valid = report.valid && valid;
                yield outputs.publishReport(report);
            }));
            return finalReports;
        });
    }
    static printReport(report) {
        const configuration = configuration_1.Configuration.getInstance();
        if (report.level === undefined || report.level <= configuration.getMaxReportLevelPrint()) {
            try {
                if (report.level === 0) {
                    console.log(`   ----------------`);
                }
                new summary_test_output_1.SummaryTestOutput(report, {
                    maxLevel: configuration.getMaxReportLevelPrint(),
                    showPassingTests: configuration.getShowPassingTests()
                }).print();
            }
            catch (e) {
                logger_1.Logger.warning(e);
            }
        }
    }
}
EnqueuerRunner.reportName = 'enqueuer';
exports.EnqueuerRunner = EnqueuerRunner;
