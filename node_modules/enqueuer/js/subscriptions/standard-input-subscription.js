"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const subscription_1 = require("./subscription");
const subscription_protocol_1 = require("../protocols/subscription-protocol");
class StandardInputSubscription extends subscription_1.Subscription {
    constructor(subscriptionModel) {
        super(subscriptionModel);
    }
    receiveMessage() {
        return new Promise((resolve) => {
            process.stdin.on('end', () => {
                if (this.value) {
                    resolve();
                    this.executeHookEvent('onMessageReceived', { message: this.value });
                }
            });
        });
    }
    subscribe() {
        process.stdin.setEncoding('utf8');
        process.stdin.resume();
        process.stdin.on('data', (chunk) => {
            if (!this.value) {
                this.value = chunk;
            }
            else {
                this.value += chunk;
            }
        });
        return Promise.resolve();
    }
    unsubscribe() {
        return __awaiter(this, void 0, void 0, function* () {
            process.stdin.pause();
        });
    }
}
function entryPoint(mainInstance) {
    const protocol = new subscription_protocol_1.SubscriptionProtocol('stdin', (subscriptionModel) => new StandardInputSubscription(subscriptionModel), {
        schema: {
            hooks: {
                onMessageReceived: {
                    arguments: {
                        message: {},
                    }
                }
            }
        }
    })
        .addAlternativeName('standard-input');
    mainInstance.protocolManager.addProtocol(protocol);
}
exports.entryPoint = entryPoint;
