"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = require("../loggers/logger");
class Subscription {
    constructor(subscriptionAttributes) {
        this.avoid = false;
        this.ignore = false;
        Object.keys(subscriptionAttributes).forEach(key => {
            this[key] = subscriptionAttributes[key];
        });
        this.type = subscriptionAttributes.type;
        this.name = subscriptionAttributes.name;
    }
    unsubscribe() {
        return __awaiter(this, void 0, void 0, function* () {
            //do nothing
        });
    }
    sendResponse() {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
    registerHookEventExecutor(hookEventExecutor) {
        this['hookEventExecutor'] = hookEventExecutor;
    }
    executeHookEvent(hookName, args = {}) {
        if (this['hookEventExecutor']) {
            this['hookEventExecutor'](hookName, args);
        }
        else {
            logger_1.Logger.warning(`Hook event executor not registered in subscription`);
        }
    }
}
exports.Subscription = Subscription;
