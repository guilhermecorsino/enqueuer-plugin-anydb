"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const subscription_1 = require("./subscription");
const dgram = __importStar(require("dgram"));
const logger_1 = require("../loggers/logger");
const subscription_protocol_1 = require("../protocols/subscription-protocol");
class UdpSubscription extends subscription_1.Subscription {
    constructor(subscriptionAttributes) {
        super(subscriptionAttributes);
        if (typeof subscriptionAttributes.response != 'string') {
            this.response = JSON.stringify(subscriptionAttributes.response, null, 2);
        }
    }
    receiveMessage() {
        return new Promise((resolve, reject) => {
            this.server.on('error', (err) => {
                this.server.close();
                reject(err);
            });
            this.server.on('message', (msg, remoteInfo) => {
                this.server.close();
                this.executeHookEvent('onMessageReceived', { payload: msg, remoteInfo: remoteInfo });
                resolve();
            });
        });
    }
    subscribe() {
        return new Promise((resolve, reject) => {
            this.server = dgram.createSocket('udp4');
            try {
                this.server.bind(this.port);
                resolve();
            }
            catch (err) {
                const message = `Udp server could not listen to ${this.port}`;
                logger_1.Logger.error(message);
                reject(message);
            }
        });
    }
}
function entryPoint(mainInstance) {
    const protocol = new subscription_protocol_1.SubscriptionProtocol('udp', (subscriptionModel) => new UdpSubscription(subscriptionModel), {
        description: 'The udp subscription provides an implementation of UDP Datagram sockets servers',
        libraryHomepage: 'https://nodejs.org/api/dgram.html',
        schema: {
            attributes: {
                port: {
                    required: true,
                    type: 'int'
                },
                response: {
                    required: true,
                    type: 'string'
                },
            },
            hooks: {
                onMessageReceived: {
                    arguments: {
                        payload: {},
                        remoteInfo: {
                            description: 'Remote address information',
                        }
                    }
                }
            }
        },
    })
        .addAlternativeName('udp-server');
    mainInstance.protocolManager.addProtocol(protocol);
}
exports.entryPoint = entryPoint;
