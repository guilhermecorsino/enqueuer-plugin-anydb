"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const subscription_1 = require("./subscription");
const logger_1 = require("../loggers/logger");
const fs = __importStar(require("fs"));
const glob = __importStar(require("glob"));
const subscription_protocol_1 = require("../protocols/subscription-protocol");
class FileSystemWatcherSubscription extends subscription_1.Subscription {
    constructor(subscriptionAttributes) {
        super(subscriptionAttributes);
        this['options'] = subscriptionAttributes.options || { nodir: true };
    }
    subscribe() {
        return Promise.resolve();
    }
    receiveMessage() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                let interval = setInterval(() => {
                    const files = glob.sync(this.fileNamePattern, this.options);
                    if (files.length > 0) {
                        const filename = files[0];
                        try {
                            this.executeHookEvent('onMessageReceived', this.extractFileInformation(filename));
                            resolve();
                        }
                        catch (error) {
                            logger_1.Logger.warning(`Error reading file ${filename}: ${error}`);
                            reject(error);
                        }
                        clearInterval(interval);
                    }
                }, 50);
            });
        });
    }
    extractFileInformation(filename) {
        const stat = fs.lstatSync(filename);
        return {
            content: fs.readFileSync(filename).toString(),
            name: filename,
            size: stat.size,
            modified: stat.mtime,
            created: stat.ctime
        };
    }
}
function entryPoint(mainInstance) {
    const protocol = new subscription_protocol_1.SubscriptionProtocol('file', (subscriptionModel) => new FileSystemWatcherSubscription(subscriptionModel), {
        description: 'The file subscription provides an implementation of filesystem readers',
        libraryHomepage: 'https://github.com/isaacs/node-glob',
        schema: {
            attributes: {
                fileNamePattern: {
                    description: 'Glob pattern to identify files to be watched',
                    required: true,
                    type: 'string'
                },
                options: {
                    description: 'https://github.com/isaacs/node-glob#options',
                    type: 'object',
                    required: false
                },
            },
            hooks: {
                onMessageReceived: {
                    arguments: {
                        name: {},
                        content: {},
                        size: {},
                        modified: {},
                        created: {}
                    }
                }
            }
        }
    })
        .addAlternativeName('file-system-watcher', 'file-watcher');
    mainInstance.protocolManager.addProtocol(protocol);
}
exports.entryPoint = entryPoint;
