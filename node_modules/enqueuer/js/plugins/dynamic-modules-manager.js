"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const protocol_manager_1 = require("./protocol-manager");
const report_formatter_manager_1 = require("./report-formatter-manager");
const configuration_1 = require("../configurations/configuration");
const logger_1 = require("../loggers/logger");
const path = __importStar(require("path"));
const object_parser_manager_1 = require("./object-parser-manager");
const asserter_manager_1 = require("./asserter-manager");
const os = __importStar(require("os"));
const glob = __importStar(require("glob"));
const fs = __importStar(require("fs"));
const prettyjson_1 = __importDefault(require("prettyjson"));
const prettyjson_config_1 = require("../outputs/prettyjson-config");
const enqueuerPackageJson = require('../../package.json');
class DynamicModulesManager {
    constructor() {
        this.protocolManager = new protocol_manager_1.ProtocolManager();
        this.reportFormatterManager = new report_formatter_manager_1.ReportFormatterManager();
        this.objectParserManager = new object_parser_manager_1.ObjectParserManager();
        this.asserterManager = new asserter_manager_1.AsserterManager();
        this.builtInModules = this.findEveryEntryPointableBuiltInModule();
        this.implicitModules = this.findEveryEnqueuerImplicitPluginPackage(os.homedir() + '/.nqr/node_modules/*')
            .concat(this.findEveryEnqueuerImplicitPluginPackage(__dirname + '/../../node_modules/*'));
        this.explicitModules = [];
        this.initialModulesLoad();
    }
    static getInstance() {
        if (!DynamicModulesManager.instance) {
            DynamicModulesManager.instance = new DynamicModulesManager();
        }
        return DynamicModulesManager.instance;
    }
    getBuiltInModules() {
        return this.builtInModules;
    }
    getImplicitModules() {
        return this.implicitModules;
    }
    getLoadedModules() {
        return {
            implicit: this.implicitModules,
            explicit: this.explicitModules,
        };
    }
    getProtocolManager() {
        return this.protocolManager;
    }
    getAsserterManager() {
        return this.asserterManager;
    }
    getReportFormatterManager() {
        return this.reportFormatterManager;
    }
    getObjectParserManager() {
        return this.objectParserManager;
    }
    describeLoadedModules() {
        console.log(prettyjson_1.default.render(this.getLoadedModules(), prettyjson_config_1.getPrettyJsonConfig()));
    }
    loadModuleExplicitly(module) {
        if (this.loadModule(module)) {
            logger_1.Logger.info(`Success to load '${path.basename(module)}' as dynamic module`);
            this.explicitModules.push(module);
            return true;
        }
        else {
            logger_1.Logger.error(`Fail to load '${module}' as dynamic module`);
            return false;
        }
    }
    findEveryEnqueuerImplicitPluginPackage(pattern) {
        try {
            return (glob.sync(pattern, {}) || [])
                .map(module => module.replace(/\.js/, ''))
                .filter(module => {
                try {
                    const packageJsonPath = module + '/package.json';
                    if (fs.existsSync(packageJsonPath)) {
                        const packageJson = JSON.parse(fs.readFileSync(packageJsonPath).toString());
                        const keyWordsMatch = (packageJson.keywords || [])
                            .find((keyword) => keyword.toLowerCase() === 'enqueuer' || keyword.toLowerCase() === 'nqr');
                        if (keyWordsMatch) {
                            const versionMatches = DynamicModulesManager.versionMatches(packageJson);
                            if (versionMatches) {
                                return require(module).entryPoint !== undefined;
                            }
                        }
                    }
                }
                catch (err) {
                    logger_1.Logger.trace(err);
                }
                return false;
            });
        }
        catch (err) {
        }
        return [];
    }
    static versionMatches(packageJson) {
        const regexp = /[^\d]*(\d+)/;
        const currentMajorVersion = (process.env.npm_package_version || enqueuerPackageJson.version).match(regexp)[0];
        const enqueuerVersion = (packageJson.dependencies || {}).enqueuer ||
            (packageJson.devDependencies || {}).enqueuer ||
            (packageJson.peerDependencies || {}).enqueuer ||
            '0.0.0';
        const pluginMajorEnqueuerVersion = enqueuerVersion.match(regexp)[1];
        logger_1.Logger.trace(`name: ${packageJson.name} => currentMajorVersion (${+currentMajorVersion}) <= pluginMajorEnqueuerVersion (${+pluginMajorEnqueuerVersion}): ${+currentMajorVersion <= +pluginMajorEnqueuerVersion}`);
        return +currentMajorVersion <= +pluginMajorEnqueuerVersion;
    }
    loadModule(module) {
        try {
            require(module)
                .entryPoint({
                protocolManager: this.protocolManager,
                reportFormatterManager: this.reportFormatterManager,
                objectParserManager: this.objectParserManager,
                asserterManager: this.asserterManager
            });
            return true;
        }
        catch (err) {
            logger_1.Logger.error(`Fail to load '${module}': ${err}`);
        }
        return false;
    }
    findEveryEntryPointableBuiltInModule() {
        const pattern = __dirname + '/../**/*\.+(ts|d.ts|js)';
        const files = glob.sync(pattern, {})
            .map(module => module.replace('./src/', '../'))
            .map(module => module.replace(/\.d\.ts/, ''))
            .map(module => module.replace(/\.ts/, ''))
            .map(module => module.replace(/\.js/, ''))
            .filter(module => {
            try {
                return require(module).entryPoint !== undefined;
            }
            catch (err) {
                return false;
            }
        });
        const plugins = new Set(files);
        return Array.from(plugins.values());
    }
    initialModulesLoad() {
        logger_1.Logger.info(`Loading built in modules`);
        this.builtInModules
            .forEach(module => this.loadModule(module) ?
            logger_1.Logger.debug(`Success to load '${path.basename(module)}' as built in module`) :
            logger_1.Logger.trace(`Fail to load '${module}' as built in  module`));
        logger_1.Logger.info(`Loading ${this.implicitModules.length} implicitly declared plugins`);
        this.implicitModules
            .forEach(module => this.loadModule(module) ?
            logger_1.Logger.info(`Success to load '${path.basename(module)}' as dynamic module`) :
            logger_1.Logger.error(`Fail to load '${module}' as dynamic module`));
        const configurationPlugins = configuration_1.Configuration.getInstance().getPlugins();
        logger_1.Logger.info(`Loading ${configurationPlugins.length} explicitly declared plugins`);
        configurationPlugins
            .filter(module => !this.explicitModules.includes(module))
            .forEach(module => this.loadModuleExplicitly(module));
    }
}
exports.DynamicModulesManager = DynamicModulesManager;
