"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = require("../loggers/logger");
const null_asserter_1 = require("../asserters/null-asserter");
const prettyjson_1 = __importDefault(require("prettyjson"));
const prettyjson_config_1 = require("../outputs/prettyjson-config");
const defaultAssertionField = {
    required: true,
    type: 'any'
};
class AsserterManager {
    constructor() {
        this.addedAsserters = [];
    }
    createAsserter(assertion) {
        const matching = this.addedAsserters
            .filter((added) => Object
            .keys(added.template)
            .filter(key => added.template[key].required || added.template[key].required === undefined)
            .every(requiredKey => assertion[requiredKey] !== undefined));
        if (matching.length > 0) {
            return matching[0].createFunction();
        }
        logger_1.Logger.error(`No asserter was found with '${JSON.stringify(assertion, null, 2)}', using default one`);
        return new null_asserter_1.NullAsserter();
    }
    addAsserter(templateAssertion, createFunction) {
        Object.keys(templateAssertion)
            .forEach(key => templateAssertion[key] = Object.assign({}, defaultAssertionField, templateAssertion[key]));
        this.addedAsserters.unshift({ template: templateAssertion, createFunction });
    }
    describeMatchingAsserters(data) {
        const matchingAsserters = this.getMatchingAsserters(data);
        console.log(prettyjson_1.default.render(matchingAsserters, prettyjson_config_1.getPrettyJsonConfig()));
        return matchingAsserters.asserters.length > 0;
    }
    getMatchingAsserters(field) {
        let matching = this.addedAsserters;
        if (typeof field === 'string') {
            matching = this.addedAsserters
                .filter((added) => Object
                .keys(added.template)
                .some(key => key.toUpperCase().indexOf(field.toUpperCase()) !== -1));
        }
        return { asserters: matching.map(added => added.template).sort() };
    }
}
exports.AsserterManager = AsserterManager;
