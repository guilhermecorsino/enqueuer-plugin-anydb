"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const prettyjson_1 = __importDefault(require("prettyjson"));
const prettyjson_config_1 = require("../outputs/prettyjson-config");
const logger_1 = require("../loggers/logger");
class ObjectParserManager {
    constructor() {
        this.addedObjectParsers = [];
    }
    addObjectParser(createFunction, firstTag, ...tags) {
        const strings = [firstTag].concat(tags);
        this.addedObjectParsers.unshift({ tags: strings, createFunction });
    }
    getMatchingObjectParsers(describeObjectParsers) {
        return {
            parsers: this.addedObjectParsers
                .filter((objectParser) => typeof (describeObjectParsers) === 'string' ? (objectParser.tags || [])
                .some((tag) => tag.toLowerCase() === describeObjectParsers.toLowerCase()) : true)
                .map((objectParser) => objectParser.tags)
        };
    }
    describeMatchingObjectParsers(data) {
        const matchingObjectParsers = this.getMatchingObjectParsers(data);
        console.log(prettyjson_1.default.render(matchingObjectParsers, prettyjson_config_1.getPrettyJsonConfig()));
        return matchingObjectParsers.parsers.length > 0;
    }
    createParser(tag) {
        const matchingObjectParsers = this.addedObjectParsers
            .filter((addedFormatter) => (addedFormatter.tags || [])
            .some((parserKey) => parserKey.toLowerCase() === tag.toLowerCase()))
            .map((addedFormatter) => addedFormatter.createFunction());
        if (matchingObjectParsers.length > 0) {
            return matchingObjectParsers[0];
        }
        logger_1.Logger.warning(`No object parser was found with '${tag}'`);
    }
    tryToParseWithParsers(fileBufferContent, tags = []) {
        const errorResult = {};
        for (const tag of tags) {
            const objectParser = this.createParser(tag);
            if (objectParser) {
                try {
                    const parsed = objectParser.parse(fileBufferContent);
                    logger_1.Logger.debug(`Content parsed as ${tag}`);
                    return parsed;
                }
                catch (err) {
                    errorResult[tag] = err.toString();
                }
            }
            else {
                errorResult[tag] = `No object parser was found with '${tag}'`;
            }
        }
        throw errorResult;
    }
}
exports.ObjectParserManager = ObjectParserManager;
