"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const prettyjson_1 = __importDefault(require("prettyjson"));
const json_formatter_1 = require("../outputs/formatters/json-formatter");
const logger_1 = require("../loggers/logger");
const prettyjson_config_1 = require("../outputs/prettyjson-config");
class ReportFormatterManager {
    constructor() {
        this.formatters = [];
    }
    createReportFormatter(format) {
        const matchingFormatters = this.formatters
            .filter((addedFormatter) => (addedFormatter.tags || [])
            .some((tag) => tag.toLowerCase() === format.toLowerCase()))
            .map((addedFormatter) => addedFormatter.createFunction());
        if (matchingFormatters.length > 0) {
            return matchingFormatters[0];
        }
        logger_1.Logger.error(`No report formatter was found with '${format}', using default one`);
        return new json_formatter_1.JsonReportFormatter();
    }
    addReportFormatter(createFunction, firstTag, ...tags) {
        this.formatters.push({ tags: [firstTag].concat(tags), createFunction });
    }
    getMatchingReportFormatters(describeFormatters) {
        return {
            formatters: this.formatters
                .filter((addedFormatter) => typeof (describeFormatters) === 'string' ? (addedFormatter.tags || [])
                .some((tag) => tag.toLowerCase() === describeFormatters.toLowerCase()) : true)
                .map((formatter) => formatter.tags)
        };
    }
    describeMatchingReportFormatters(describeFormatters) {
        const matchingReportFormatters = this.getMatchingReportFormatters(describeFormatters);
        console.log(prettyjson_1.default.render(matchingReportFormatters, prettyjson_config_1.getPrettyJsonConfig()));
        return matchingReportFormatters.formatters.length > 0;
    }
}
exports.ReportFormatterManager = ReportFormatterManager;
