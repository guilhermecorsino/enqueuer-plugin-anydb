"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const object_decycler_1 = require("./object-decycler");
class CsvObjectParser {
    parse(text, query = {}) {
        const { header, delimiter } = this.parseQuery(query);
        const lineSeparator = /\r?\n/;
        if (text.split) {
            const lines = text.split(lineSeparator);
            if (!header) {
                return lines
                    .filter(line => line.length > 0)
                    .map((line) => line.split(delimiter));
            }
            else if (lines[0]) {
                return this.parseWithHeader(lines, delimiter);
            }
        }
        return [];
    }
    stringify(value, query = {}) {
        const { header, delimiter } = this.parseQuery(query);
        if (!value) {
            return '{}';
        }
        const decycler = new object_decycler_1.ObjectDecycler('[CYCLIC REFERENCE]');
        if (header) {
            return this.stringifyWithHeader(value, decycler, delimiter);
        }
        else {
            return value
                .map((row) => row
                .map((value) => decycler.decycle(value))
                .join(delimiter))
                .join('\r\n');
        }
    }
    parseQuery(query) {
        return Object.assign({}, {
            header: true,
            delimiter: ';'
        }, query);
    }
    stringifyWithHeader(value, decycle, delimiter) {
        const title = Object.keys(value[0]);
        const csv = value
            .map((row) => title
            .map(fieldName => decycle.decycle(row[fieldName]))
            .join(delimiter));
        csv.unshift(title.join(delimiter));
        return csv.join('\r\n');
    }
    parseWithHeader(lines, delimiter) {
        let result = [];
        const headers = lines[0].split(delimiter);
        lines
            .filter((line, index) => line.length > 0 && index > 0)
            .forEach((currentLine) => {
            let parsedLine = {};
            currentLine.split(delimiter)
                .forEach((value, valuesIndex) => {
                parsedLine[headers[valuesIndex]] = value;
            });
            result.push(parsedLine);
        });
        return result;
    }
}
exports.CsvObjectParser = CsvObjectParser;
function entryPoint(mainInstance) {
    mainInstance.objectParserManager.addObjectParser(() => new CsvObjectParser(), 'csv');
}
exports.entryPoint = entryPoint;
