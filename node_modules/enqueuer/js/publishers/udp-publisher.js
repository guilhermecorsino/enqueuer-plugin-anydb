"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const publisher_1 = require("./publisher");
const logger_1 = require("../loggers/logger");
const dgram = __importStar(require("dgram"));
const publisher_protocol_1 = require("../protocols/publisher-protocol");
class UdpPublisher extends publisher_1.Publisher {
    constructor(publisherAttributes) {
        super(publisherAttributes);
    }
    publish() {
        return new Promise((resolve, reject) => {
            const client = dgram.createSocket('udp4');
            logger_1.Logger.debug('Udp client trying to send message');
            client.send(Buffer.from(this.payload), this.port, this.serverAddress, (error) => {
                if (error) {
                    client.close();
                    reject(error);
                    return;
                }
                logger_1.Logger.debug('Udp client sent message');
                resolve();
            });
        });
    }
}
function entryPoint(mainInstance) {
    const protocol = new publisher_protocol_1.PublisherProtocol('udp', (publisherModel) => new UdpPublisher(publisherModel), {
        description: 'The udp publisher provides an implementation of UDP Datagram sockets clients',
        libraryHomepage: 'https://nodejs.org/api/dgram.html',
        schema: {
            attributes: {
                payload: {
                    required: true,
                    type: 'text'
                },
                serverAddress: {
                    required: true,
                    type: 'string'
                },
                port: {
                    required: true,
                    type: 'int'
                },
            }
        },
    }).addAlternativeName('udp-client');
    mainInstance.protocolManager.addProtocol(protocol);
}
exports.entryPoint = entryPoint;
