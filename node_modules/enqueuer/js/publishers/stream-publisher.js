"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const publisher_1 = require("./publisher");
const net = __importStar(require("net"));
const logger_1 = require("../loggers/logger");
const store_1 = require("../configurations/store");
const tls = __importStar(require("tls"));
const timeout_1 = require("../timers/timeout");
const publisher_protocol_1 = require("../protocols/publisher-protocol");
class StreamPublisher extends publisher_1.Publisher {
    constructor(publisherAttributes) {
        super(publisherAttributes);
        this['timeout'] = this.timeout || 1000;
        if (this.loadStream) {
            logger_1.Logger.debug(`Loading ${this.type} client: ${this.loadStream}`);
            this.loadedStream = store_1.Store.getData()[this.loadStream];
        }
    }
    publish() {
        return new Promise((resolve, reject) => {
            if (this.loadStream) {
                this.sendReusingStream(resolve, reject);
            }
            else {
                this.sendCreatingStream(resolve, reject);
            }
        });
    }
    sendReusingStream(resolve, reject) {
        logger_1.Logger.info(`${this.type} client is trying to reuse stream ${this.loadStream}`);
        if (!this.loadedStream) {
            logger_1.Logger.error(`There is no ${this.type} stream able to be loaded named ${this.loadStream}`);
            this.sendCreatingStream(resolve, reject);
        }
        else {
            logger_1.Logger.debug(`Client is reusing ${this.type} stream`);
            this.publishData(this.loadedStream, resolve, reject);
        }
    }
    sendCreatingStream(resolve, reject) {
        logger_1.Logger.info(`${this.type} client trying to connect`);
        this.createStream()
            .then((stream) => {
            logger_1.Logger.debug(`${this.type} client connected to: ${this.serverAddress}:${this.port || this.path}`);
            this.publishData(stream, resolve, reject);
        }).catch(err => {
            reject(err);
        });
    }
    createStream() {
        return new Promise((resolve, reject) => {
            if ('tcp' === (this.type || '').toLowerCase()) {
                this.createTcpStream(resolve, reject);
            }
            else if ('ssl' === (this.type || '').toLowerCase()) {
                this.createSslStream(resolve, reject);
            }
            else {
                resolve(net.createConnection(this.path));
            }
        });
    }
    createSslStream(resolve, reject) {
        const stream = tls.connect(this.port, this.serverAddress, this.options, () => resolve(stream));
        stream.on('error', (error) => {
            logger_1.Logger.error(`${this.type} client error: ${error}`);
            reject(error);
        });
    }
    createTcpStream(resolve, reject) {
        const stream = new net.Socket();
        stream.connect(this.port, this.serverAddress, () => resolve(stream));
        stream.on('error', (error) => {
            logger_1.Logger.error(`${this.type} client error: ${error}`);
            reject(error);
        });
    }
    publishData(stream, resolve, reject) {
        logger_1.Logger.debug(`${this.type} client publishing`);
        stream.once('error', (data) => {
            this.finalize(stream);
            reject(data);
        });
        const stringifyPayload = this.stringifyPayload();
        stream.write(stringifyPayload, () => {
            logger_1.Logger.debug(`${this.type} client published`);
            this.registerEvents(stream, resolve);
            if (this.saveStream) {
                logger_1.Logger.debug(`Persisting publisher stream ${this.saveStream}`);
                store_1.Store.getData()[this.saveStream] = stream;
            }
        });
    }
    registerEvents(stream, resolve) {
        new timeout_1.Timeout(() => {
            this.finalize(stream);
            logger_1.Logger.debug(`${this.type} client timed out`);
            stream.removeAllListeners('data');
            resolve();
        }).start(this.timeout);
        stream.once('end', () => {
            logger_1.Logger.debug(`${this.type} client ended`);
            this.finalize(stream);
            resolve();
        }).on('data', (msg) => {
            logger_1.Logger.debug(`${this.type} client got data '${msg.toString()}'`);
            if (!this.messageReceived) {
                this.messageReceived = {
                    payload: '',
                    stream: stream.address()
                };
            }
            this.messageReceived.payload += msg;
        });
    }
    finalize(stream) {
        if (this.messageReceived) {
            this.executeHookEvent('onMessageReceived', this.messageReceived);
        }
        if (!this.saveStream) {
            logger_1.Logger.trace(`Ending writable stream`);
            stream.end();
        }
        if (stream.close) {
            logger_1.Logger.trace(`Closing writable stream`);
            stream.close();
        }
    }
    stringifyPayload() {
        if (typeof (this.payload) != 'string' && !Buffer.isBuffer(this.payload)) {
            return JSON.stringify(this.payload);
        }
        return this.payload;
    }
}
function entryPoint(mainInstance) {
    const createFunction = (publisherModel) => new StreamPublisher(publisherModel);
    const docs = {
        description: 'The stream subscription provides implementations of TCP/UDS servers',
        libraryHomepage: 'https://nodejs.org/api/net.html',
        schema: {
            attributes: {
                payload: {
                    required: true,
                    type: 'text'
                },
                serverAddress: {
                    required: false,
                    type: 'string'
                },
                port: {
                    description: 'Defined when using TCP',
                    required: false,
                    type: 'int'
                },
                path: {
                    description: 'Defined when using UDS',
                    required: false,
                    type: 'string'
                },
                saveStream: {
                    description: 'Set it when you want to reuse this stream',
                    required: false,
                    type: 'string'
                },
                loadStream: {
                    description: 'Set it when you want to reuse an opened stream',
                    required: false,
                    type: 'string'
                },
                timeout: {
                    description: 'Timeout to stop listening after the first byte is read',
                    required: false,
                    type: 'int'
                },
                options: {
                    description: 'Defined when using SSL. https://nodejs.org/api/net.html#net_net_createserver_options_connectionlistener',
                    required: false,
                    type: 'object'
                },
            },
            hooks: {
                onMessageReceived: {
                    arguments: {
                        payload: {},
                        stream: {}
                    }
                }
            }
        }
    };
    const tcp = new publisher_protocol_1.PublisherProtocol('tcp', createFunction, docs);
    const uds = new publisher_protocol_1.PublisherProtocol('uds', createFunction, docs);
    const ssl = new publisher_protocol_1.PublisherProtocol('ssl', createFunction, docs);
    mainInstance.protocolManager.addProtocol(tcp);
    mainInstance.protocolManager.addProtocol(uds);
    mainInstance.protocolManager.addProtocol(ssl);
}
exports.entryPoint = entryPoint;
