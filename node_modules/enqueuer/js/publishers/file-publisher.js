"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const publisher_1 = require("./publisher");
const id_generator_1 = require("../strings/id-generator");
const fs = __importStar(require("fs"));
const publisher_protocol_1 = require("../protocols/publisher-protocol");
const date_controller_1 = require("../timers/date-controller");
class FilePublisher extends publisher_1.Publisher {
    constructor(publisherAttributes) {
        super(publisherAttributes);
        this['filenameExtension'] = this.filenameExtension || 'enq';
    }
    publish() {
        const filename = this.getFileName();
        let value = this.payload;
        if (typeof (value) === 'object') {
            value = JSON.stringify(value, null, 2);
        }
        fs.writeFileSync(filename, value);
        return Promise.resolve();
    }
    getFileName() {
        if (this.filename) {
            return this.filename;
        }
        return this.createFileName();
    }
    createFileName() {
        let filename = this.filenamePrefix + new id_generator_1.IdGenerator(this.payload || new date_controller_1.DateController().getStringOnlyNumbers()).generateId();
        const needsToInsertDot = filename.lastIndexOf('.') == -1 && this.filenameExtension.lastIndexOf('.') == -1;
        if (needsToInsertDot) {
            filename += '.';
        }
        return filename + this.filenameExtension;
    }
}
function entryPoint(mainInstance) {
    const protocol = new publisher_protocol_1.PublisherProtocol('file', (publisherModel) => new FilePublisher(publisherModel), {
        description: 'The file publisher provides an implementation of filesystem writers',
        libraryHomepage: 'https://nodejs.org/api/fs.html',
        schema: {
            attributes: {
                filenameExtension: {
                    description: 'Used when there is no file name defined, succeeds the auto generated file name',
                    required: false,
                    type: 'string'
                },
                filenamePrefix: {
                    description: 'Used when there is no file name defined, precedes the auto generated file name',
                    required: false,
                    type: 'string'
                },
                filename: {
                    description: 'The file name',
                    required: false,
                    type: 'string'
                },
                payload: {
                    type: 'text',
                    required: true
                },
            }
        }
    });
    mainInstance.protocolManager.addProtocol(protocol);
}
exports.entryPoint = entryPoint;
