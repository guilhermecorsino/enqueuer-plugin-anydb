"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const publisher_1 = require("./publisher");
const store_1 = require("../configurations/store");
const logger_1 = require("../loggers/logger");
const fs = __importStar(require("fs"));
const require_from_string_1 = __importDefault(require("require-from-string"));
const publisher_protocol_1 = require("../protocols/publisher-protocol");
class CustomPublisher extends publisher_1.Publisher {
    constructor(model) {
        super(model);
        this['model'] = model;
    }
    publish() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const moduleString = fs.readFileSync(this.module).toString();
                const module = require_from_string_1.default(moduleString);
                const custom = new module.Publisher(this);
                return yield custom.publish({ store: store_1.Store.getData(), logger: logger_1.Logger });
            }
            catch (err) {
                logger_1.Logger.error(`Error loading module '${this.module}': ${err}`);
            }
        });
    }
}
function entryPoint(mainInstance) {
    const protocol = new publisher_protocol_1.PublisherProtocol('custom', (publisherModel) => new CustomPublisher(publisherModel));
    mainInstance.protocolManager.addProtocol(protocol);
}
exports.entryPoint = entryPoint;
