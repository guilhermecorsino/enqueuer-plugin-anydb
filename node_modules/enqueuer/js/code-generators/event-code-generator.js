"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertion_code_generator_1 = require("./assertion-code-generator");
const store_code_generator_1 = require("./store-code-generator");
const dynamic_function_controller_1 = require("../dynamic-functions/dynamic-function-controller");
const store_1 = require("../configurations/store");
const logger_1 = require("../loggers/logger");
const dynamic_modules_manager_1 = require("../plugins/dynamic-modules-manager");
//TODO test it
class EventCodeGenerator {
    constructor(thisArg, eventName) {
        this.tests = [];
        this.testsInstanceName = 'tests';
        this.asserterInstanceName = 'asserter';
        this.storeInstanceName = 'store';
        this.thisArg = thisArg;
        this.name = eventName;
        const eventValue = this.thisArg[eventName] || {};
        this.store = eventValue.store || {};
        this.script = eventValue.script || '';
        this.assertions = eventValue.assertions || [];
    }
    run(functionArguments) {
        this.runScriptAndStore(functionArguments);
        this.runAssertions(functionArguments);
        return this.tests;
    }
    runScriptAndStore(functionArguments) {
        const dynamicFunction = new dynamic_function_controller_1.DynamicFunctionController(this.getScriptSnippet() + this.getStoreSnippet(), this.thisArg);
        dynamicFunction.addArgument(this.storeInstanceName, store_1.Store.getData());
        dynamicFunction.addArgument(this.testsInstanceName, this.tests);
        dynamicFunction.addArgument('Logger', logger_1.Logger);
        functionArguments.forEach(argument => {
            dynamicFunction.addArgument(argument.name, argument.value);
        });
        try {
            dynamicFunction.execute();
        }
        catch (err) {
            const message = `Error running event '${this.name}': ${err}`;
            logger_1.Logger.error(message);
            this.tests.push({ valid: false, name: 'Event ran', description: message });
        }
    }
    getScriptSnippet() {
        return `try {
                        ${this.script}
                    } catch (err) {
                        const msg = \`Error executing '${this.name}' script: '\${err}'\`;
                        Logger.error(msg);
                        ${this.testsInstanceName}.push({
                                description: msg,
                                valid: false,
                                name: "Valid 'script' code"
                            });
                    }\n`;
    }
    getStoreSnippet() {
        return new store_code_generator_1.StoreCodeGenerator(this.testsInstanceName, this.storeInstanceName).generate(this.store);
    }
    runAssertions(functionArguments) {
        this.assertions.forEach((assertion) => {
            const assertionCodeGenerator = new assertion_code_generator_1.AssertionCodeGenerator(this.testsInstanceName, this.asserterInstanceName, 'assertion');
            const dynamicFunction = new dynamic_function_controller_1.DynamicFunctionController(assertionCodeGenerator.generate(), this.thisArg);
            dynamicFunction.addArgument(this.asserterInstanceName, dynamic_modules_manager_1.DynamicModulesManager.getInstance().getAsserterManager().createAsserter(assertion));
            dynamicFunction.addArgument(this.storeInstanceName, store_1.Store.getData());
            dynamicFunction.addArgument(this.testsInstanceName, this.tests);
            dynamicFunction.addArgument('assertion', assertion);
            dynamicFunction.addArgument('Logger', logger_1.Logger);
            functionArguments.forEach(argument => {
                dynamicFunction.addArgument(argument.name, argument.value);
            });
            try {
                dynamicFunction.execute();
            }
            catch (err) {
                const message = `Error running event '${this.name}' '${assertion.name}': ${err}`;
                logger_1.Logger.error(message);
                this.tests.push({ valid: false, name: 'Assertion ran', description: message });
            }
        });
    }
}
exports.EventCodeGenerator = EventCodeGenerator;
