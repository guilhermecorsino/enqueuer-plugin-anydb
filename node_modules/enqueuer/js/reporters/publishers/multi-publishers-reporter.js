"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const publisher_reporter_1 = require("./publisher-reporter");
const logger_1 = require("../../loggers/logger");
const component_importer_1 = require("../../requisition-runners/component-importer");
class MultiPublishersReporter {
    constructor(publishers) {
        logger_1.Logger.debug(`Instantiating publishers`);
        this.publishers = publishers.map(publisher => new publisher_reporter_1.PublisherReporter(new component_importer_1.ComponentImporter().importPublisher(publisher)));
    }
    publish() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.publishers.length > 0) {
                logger_1.Logger.debug(`Publishers are publishing messages`);
                yield Promise.all(this.publishers.map((publisher) => __awaiter(this, void 0, void 0, function* () {
                    try {
                        yield publisher.publish();
                    }
                    catch (err) {
                        logger_1.Logger.error(err);
                    }
                })));
                logger_1.Logger.debug(`Publishers have published their messages`);
            }
        });
    }
    onFinish() {
        //sync forEach
        this.publishers.map(publisher => publisher.onFinish());
    }
    getReport() {
        return this.publishers.map(publisher => publisher.getReport());
    }
}
exports.MultiPublishersReporter = MultiPublishersReporter;
