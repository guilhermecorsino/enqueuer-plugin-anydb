"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const subscription_reporter_1 = require("./subscription-reporter");
const logger_1 = require("../../loggers/logger");
const component_importer_1 = require("../../requisition-runners/component-importer");
class MultiSubscriptionsReporter {
    constructor(subscriptions) {
        this.subscriptions = [];
        logger_1.Logger.debug(`Instantiating subscriptions`);
        this.subscriptions = subscriptions
            .map(subscription => new subscription_reporter_1.SubscriptionReporter(new component_importer_1.ComponentImporter().importSubscription(subscription)));
        this.timeoutPromise = Promise.resolve();
    }
    start() {
        this.timeoutPromise = new Promise((resolve) => {
            this.subscriptions.forEach(subscription => {
                subscription.startTimeout(() => {
                    if (this.subscriptions.every(subscription => subscription.hasFinished())) {
                        const message = `Every subscription has finished its job`;
                        logger_1.Logger.debug(message);
                        resolve(message);
                    }
                });
            });
        });
    }
    subscribe() {
        return __awaiter(this, void 0, void 0, function* () {
            logger_1.Logger.info(`Subscriptions are subscribing`);
            return Promise.race([
                Promise.all(this.subscriptions.map((subscription) => __awaiter(this, void 0, void 0, function* () {
                    try {
                        yield subscription.subscribe();
                    }
                    catch (err) {
                        logger_1.Logger.error(`Error subscribing: ${err}`);
                    }
                }))),
                this.timeoutPromise
            ]);
        });
    }
    receiveMessage() {
        return __awaiter(this, void 0, void 0, function* () {
            logger_1.Logger.debug(`Subscriptions are waiting for messages`);
            yield Promise.race([
                Promise.all(this.subscriptions.map((subscription) => __awaiter(this, void 0, void 0, function* () {
                    try {
                        yield subscription.receiveMessage();
                        logger_1.Logger.debug(`A subscription received a message`);
                    }
                    catch (err) {
                        logger_1.Logger.error(`Error receiving message: ${err}`);
                    }
                }))),
                this.timeoutPromise
            ]);
            logger_1.Logger.debug(`Subscriptions are no longer waiting for messages`);
        });
    }
    unsubscribe() {
        return __awaiter(this, void 0, void 0, function* () {
            logger_1.Logger.info(`Subscriptions are unsubscribing`);
            return yield Promise.all(this.subscriptions.map(subscription => subscription.unsubscribe()));
        });
    }
    getReport() {
        return this.subscriptions.map(subscription => subscription.getReport());
    }
    onFinish() {
        this.subscriptions.forEach(subscriptionHandler => subscriptionHandler.onFinish());
    }
}
exports.MultiSubscriptionsReporter = MultiSubscriptionsReporter;
