"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const date_controller_1 = require("../timers/date-controller");
const requisition_default_reports_1 = require("../models-defaults/outputs/requisition-default-reports");
const event_1 = require("../models/events/event");
const hook_reporter_1 = require("./hook-reporter");
class RequisitionReportGenerator {
    constructor(requisitionAttributes, timeout) {
        this.startTime = new date_controller_1.DateController();
        this.report = requisition_default_reports_1.RequisitionDefaultReports.createDefaultReport(requisitionAttributes);
        this.report.id = requisitionAttributes.id;
        this.startTime = new date_controller_1.DateController();
        this.timeout = timeout;
    }
    setPublishersReport(publishersReport) {
        this.report.publishers = publishersReport;
    }
    setSubscriptionsReport(subscriptionReport) {
        this.report.subscriptions = subscriptionReport;
    }
    getReport() {
        this.report.valid = (this.report.subscriptions || []).every(report => report.valid) &&
            (this.report.publishers || []).every(report => report.valid) &&
            Object.keys(this.report.hooks || {}).every((key) => this.report.hooks ? this.report.hooks[key].valid : true);
        return this.report;
    }
    finish() {
        this.addTimesReport();
    }
    addTest(hookName, hook) {
        this.report.hooks[hookName] = new hook_reporter_1.HookReporter(this.report.hooks[hookName]).addValues(hook);
    }
    addTimesReport() {
        this.report.time = this.generateTimesReport();
        if (this.timeout) {
            this.report.time.timeout = this.timeout;
            if (this.report.time.totalTime > this.report.time.timeout) {
                this.addTest(event_1.DefaultHookEvents.ON_FINISH, {
                    valid: false, tests: [{
                            valid: false,
                            name: 'No time out',
                            description: `Requisition has timed out: ${this.report.time.totalTime} > ${this.timeout}`
                        }]
                });
            }
        }
    }
    generateTimesReport() {
        const endDate = new date_controller_1.DateController();
        return {
            startTime: this.startTime.toString(),
            endTime: endDate.toString(),
            totalTime: endDate.getTime() - this.startTime.getTime()
        };
    }
}
exports.RequisitionReportGenerator = RequisitionReportGenerator;
