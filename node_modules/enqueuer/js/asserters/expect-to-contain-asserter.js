"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class ExpectToContainAsserter {
    assert(assertion, literal) {
        const name = assertion.name;
        const actual = assertion.expect;
        const expected = assertion.toContain;
        const not = assertion.not !== undefined;
        if (typeof (actual) === 'string') {
            if (typeof (expected) === 'string') {
                return {
                    name,
                    valid: not ? actual.indexOf(expected) === -1 : actual.indexOf(expected) !== -1,
                    description: `Expecting '${actual}' (${literal.expect})${not ? ' not' : ''} to contain '${expected}'`
                };
            }
            else {
                return {
                    name,
                    valid: false,
                    description: `Expecting 'toContain' to be a 'string'. Received a '${typeof (expected)}' instead`
                };
            }
        }
        else if (Array.isArray((actual))) {
            return {
                name,
                valid: not ? !actual.includes(expected) : actual.includes(expected),
                description: `Expecting '${actual}' (${literal.expect})${not ? ' not' : ''} to contain '${expected}'`
            };
        }
        else {
            return {
                name,
                valid: false,
                description: `Expecting '${literal.expect}' to be a string or an array. Received a '${typeof (actual)}'`
            };
        }
    }
}
exports.ExpectToContainAsserter = ExpectToContainAsserter;
function entryPoint(mainInstance) {
    mainInstance.asserterManager.addAsserter({
        expect: {
            description: 'actual value',
            type: ['string', 'array']
        },
        not: {
            required: false,
            description: 'negates',
            type: 'null'
        },
        toContain: {
            description: 'element',
            type: ['string', 'any']
        },
    }, () => new ExpectToContainAsserter());
}
exports.entryPoint = entryPoint;
