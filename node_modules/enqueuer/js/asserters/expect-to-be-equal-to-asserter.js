"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class ExpectToBeEqualToAsserter {
    assert(assertion, literal) {
        const name = assertion.name;
        const actual = assertion.expect;
        const expected = assertion.toBeEqualTo;
        if (typeof (actual) === 'object' && typeof (expected) === 'object') {
            const areEquals = this.deepEqual(actual, expected);
            return {
                name,
                valid: assertion.not === undefined ? areEquals : !areEquals,
                description: `Expected '${JSON.stringify(literal.expect, null, 2)}'${assertion.not === undefined ?
                    '' : ' not'} to be equal to '${JSON
                    .stringify(expected, null, 2)}'. Received '${JSON
                    .stringify(actual, null, 2)}'`
            };
        }
        else {
            return {
                name,
                valid: assertion.not === undefined ? actual == expected : actual != expected,
                description: `Expected '${literal.expect}'${assertion.not === undefined ?
                    '' : ' not'} to be equal to '${expected}'. Received '${actual}'`
            };
        }
    }
    deepEqual(x, y) {
        const ok = Object.keys, tx = typeof x, ty = typeof y;
        return x && y && tx === 'object' && tx === ty ? (ok(x).length === ok(y).length &&
            ok(x).every(key => this.deepEqual(x[key], y[key]))) : (x === y && (x != null && y != null || x.constructor === y.constructor));
    }
}
exports.ExpectToBeEqualToAsserter = ExpectToBeEqualToAsserter;
function entryPoint(mainInstance) {
    mainInstance.asserterManager.addAsserter({
        expect: {
            type: 'number',
            description: 'actual value'
        }, not: {
            required: false,
            description: 'negates',
            type: 'null'
        }, toBeEqualTo: {
            type: 'number',
            description: 'expected value'
        }
    }, () => new ExpectToBeEqualToAsserter());
}
exports.entryPoint = entryPoint;
