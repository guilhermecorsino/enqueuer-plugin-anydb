"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = require("commander");
const dynamic_modules_manager_1 = require("../plugins/dynamic-modules-manager");
const logger_1 = require("../loggers/logger");
const packageJson = require('../../package.json');
class CommandLineConfiguration {
    constructor(commandLineArguments) {
        this.commandLineStore = {};
        this.plugins = [];
        this.testFiles = [];
        this.testFilesIgnoringOthers = [];
        const commander = new commander_1.Command()
            .version(process.env.npm_package_version || packageJson.version, '-v, --version')
            .allowUnknownOption()
            .usage('[options] <test-file> [other-test-files...]')
            .description('Take a look at the full documentation: https://enqueuer.com')
            .option('-b, --verbosity <level>', 'set verbosity', /^(trace|debug|info|warn|error|fatal)$/i, 'warn')
            .option('-c, --config-file <path>', 'set configurationFile')
            .option('-e, --parsers-list [parser]', 'list available object parsers')
            .option('-f, --formatters-description [formatter]', 'describe report formatters')
            .option('-o, --stdout-requisition-output', 'add stdout as requisition output', false)
            .option('-m, --max-report-level-print <level>', 'set max report level print', /^(\d)$/i)
            .option('-p, --protocols-description [protocol]', 'describe protocols')
            .option('-t, --tests-list [expectedField]', 'list available tests assertions')
            .option('-u, --loaded-modules-list', 'list loaded modules')
            .option('-i, --show-passing-tests', 'show passing tests')
            .option('-s, --store [store]', 'add variables values to this session', (val, memo) => this.storeCommandLineAction(val, memo), [])
            .option('-l, --add-plugin [plugin]', 'add plugin', (val) => this.plugins.push(val), [])
            .option('-a, --add-file <file>', 'add file to be tested', (val) => this.testFiles.push(val), [])
            .option('-A, --add-file-and-ignore-others <file>', 'add file to be tested and ignore others', (val) => this.testFilesIgnoringOthers.push(val), []);
        commander.on('--help', () => this.helpDescription());
        try {
            this.parsedCommandLine = commander.parse(commandLineArguments || ['path', 'enqueuer']);
        }
        catch (err) {
            logger_1.Logger.error(`Error parsing command line: ${err}`);
            this.parsedCommandLine = {};
        }
    }
    verifyPrematureActions() {
        let exitCode;
        if (this.parsedCommandLine.protocolsDescription) {
            const protocolsMatcherArg = typeof this.parsedCommandLine.protocolsDescription === 'string' ?
                this.parsedCommandLine.protocolsDescription :
                undefined;
            exitCode = dynamic_modules_manager_1.DynamicModulesManager.getInstance().getProtocolManager()
                .describeMatchingProtocols(protocolsMatcherArg);
        }
        else if (this.parsedCommandLine.formattersDescription) {
            exitCode = dynamic_modules_manager_1.DynamicModulesManager.getInstance().getReportFormatterManager()
                .describeMatchingReportFormatters(this.parsedCommandLine.formattersDescription);
        }
        else if (this.parsedCommandLine.parsersList) {
            exitCode = dynamic_modules_manager_1.DynamicModulesManager.getInstance().getObjectParserManager()
                .describeMatchingObjectParsers(this.parsedCommandLine.parsersList);
        }
        else if (this.parsedCommandLine.testsList) {
            exitCode = dynamic_modules_manager_1.DynamicModulesManager.getInstance().getAsserterManager()
                .describeMatchingAsserters(this.parsedCommandLine.testsList);
        }
        else if (this.parsedCommandLine.loadedModulesList) {
            dynamic_modules_manager_1.DynamicModulesManager.getInstance().describeLoadedModules();
            exitCode = true;
        }
        if (exitCode !== undefined) {
            process.exit(exitCode ? 0 : 1);
        }
    }
    getVerbosity() {
        return this.parsedCommandLine.verbosity;
    }
    getStdoutRequisitionOutput() {
        return !!this.parsedCommandLine.stdoutRequisitionOutput;
    }
    getConfigFileName() {
        return this.parsedCommandLine.configFile;
    }
    getShowPassingTests() {
        return this.parsedCommandLine.showPassingTests;
    }
    getStore() {
        return this.commandLineStore;
    }
    getTestFiles() {
        const testFiles = this.testFiles;
        if (testFiles.length > 0) {
            return testFiles;
        }
        const args = this.parsedCommandLine.args;
        if (args && args.length > 0) {
            return args;
        }
        return [];
    }
    getTestFilesIgnoringOthers() {
        return this.testFilesIgnoringOthers;
    }
    getPlugins() {
        return this.plugins;
    }
    getMaxReportLevelPrint() {
        return this.parsedCommandLine.maxReportLevelPrint;
    }
    getVersion() {
        return this.parsedCommandLine._version;
    }
    storeCommandLineAction(val, memo) {
        const split = val.split('=');
        if (split.length == 2) {
            this.commandLineStore[split[0]] = split[1];
        }
        memo.push(val);
        return memo;
    }
    helpDescription() {
        console.log('');
        console.log('Examples:');
        console.log('  $ nqr --config-file config-file.yml --verbosity error --store key=value');
        console.log('  $ enqueuer -c config-file.yml test-file.yml --add-file another-test-file.yml -b info');
        console.log('  $ enqueuer test-file.yml --store someKey=true --store someOtherKey=false');
        console.log('  $ nqr --protocols-description -s key=value');
        console.log('  $ nqr -t expect');
        console.log('  $ nqr -l my-enqueuer-plugin-name -p plugin-protocol');
        console.log('  $ nqr -p http');
        console.log('  $ nqr --formatters-description json');
    }
}
exports.CommandLineConfiguration = CommandLineConfiguration;
