"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = require("../loggers/logger");
const dynamic_modules_manager_1 = require("../plugins/dynamic-modules-manager");
const fs = __importStar(require("fs"));
class FileContentMapCreator {
    constructor(value) {
        this.map = {};
        this.checkChildren(value);
    }
    getMap() {
        return this.map;
    }
    checkChildren(node) {
        for (const key in node) {
            const attribute = node[key];
            if (typeof attribute === 'object') {
                this.checkChildren(attribute);
            }
            else if (attribute !== undefined) {
                this.findTags(JSON.stringify(attribute));
            }
        }
    }
    findTags(node) {
        const angleBrackets = /<<[\w\s]+:\/\/[^>>]+>>/g;
        const curlyBrackets = /{{[\w\s]+:\/\/[^}}]+}}/g;
        const match = (node.match(angleBrackets) || []).concat(node.match(curlyBrackets) || []);
        match.forEach((value) => {
            const key = value.substr(2, value.length - 4);
            this.map[key] = this.insertIntoMap(key);
        });
    }
    insertIntoMap(key) {
        if (!this.map[key]) {
            try {
                const query = this.parsePlaceHolder(key);
                const fileContent = fs.readFileSync(query.filename).toString();
                const objectParser = dynamic_modules_manager_1.DynamicModulesManager.getInstance().getObjectParserManager().createParser(query.tag);
                if (objectParser !== undefined) {
                    logger_1.Logger.trace(`Trying to parse content as '${query.tag}' parser`);
                    return this.getValue(objectParser, fileContent, query);
                }
                return fileContent;
            }
            catch (err) {
                logger_1.Logger.warning(err.toString());
                return err.toString();
            }
        }
        return this.map[key];
    }
    parsePlaceHolder(key) {
        const separator = '://';
        const separatorIndex = key.indexOf(separator);
        const tag = key.substring(0, separatorIndex);
        const afterDoubleSlash = key.substring(separatorIndex + 3);
        const parseQuery = this.parseQuery(afterDoubleSlash);
        parseQuery.tag = tag;
        return parseQuery;
    }
    parseQuery(tag) {
        const strings = tag.split('?');
        const query = {
            filename: strings[0]
        };
        if (strings.length > 1) {
            const pairs = strings[1].split('&');
            for (let i = 0; i < pairs.length; i++) {
                const pair = pairs[i].split('=');
                let value = pair[1];
                if (value === undefined) {
                    value = true;
                }
                query[pair[0]] = value;
            }
        }
        return query;
    }
    getValue(objectParser, fileContent, query) {
        try {
            return objectParser.parse(fileContent, query);
        }
        catch (err) {
            logger_1.Logger.error(err.toString());
            return fileContent;
        }
    }
}
exports.FileContentMapCreator = FileContentMapCreator;
