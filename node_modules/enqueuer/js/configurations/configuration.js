"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const command_line_configuration_1 = require("./command-line-configuration");
const file_configuration_1 = require("./file-configuration");
const logger_1 = require("../loggers/logger");
const prettyjson_1 = __importDefault(require("prettyjson"));
const prettyjson_config_1 = require("../outputs/prettyjson-config");
const dynamic_modules_manager_1 = require("../plugins/dynamic-modules-manager");
process.setMaxListeners(30);
class Configuration {
    constructor() {
        this.parallel = false;
        this.files = [];
        this.logLevel = 'warn';
        this.outputs = [];
        this.maxReportLevelPrint = 1;
        this.store = {};
        this.plugins = [];
        this.showPassingTests = false;
        this.commandLineConfiguration = new command_line_configuration_1.CommandLineConfiguration(process.argv);
        const fileName = this.commandLineConfiguration.getConfigFileName();
        this.adjustFromFile(fileName);
        this.adjustFromCommandLine();
    }
    static getInstance() {
        if (Configuration.loaded === false) {
            Configuration.loaded = true;
            Configuration.instance = new Configuration();
            logger_1.Logger.setLoggerLevel(Configuration.instance.getLogLevel());
            Configuration.instance.commandLineConfiguration.verifyPrematureActions();
            if (Configuration.instance.logLevel === 'trace') {
                this.printConfiguration();
            }
        }
        return Configuration.instance;
    }
    getValues() {
        const copy = Object.assign({}, Configuration.instance);
        delete copy.commandLineConfiguration;
        return copy;
    }
    addPlugin(pluginName) {
        logger_1.Logger.info(`Plugin added to the list: ${pluginName}`);
        const plugins = new Set(this.plugins);
        plugins.add(pluginName);
        this.plugins = Array.from(plugins.values());
        return dynamic_modules_manager_1.DynamicModulesManager.getInstance().loadModuleExplicitly(pluginName);
    }
    isParallel() {
        return this.parallel;
    }
    getShowPassingTests() {
        return this.showPassingTests;
    }
    addFiles(...files) {
        this.files = this.files.concat(files);
    }
    getFiles() {
        return this.files;
    }
    getLogLevel() {
        return this.logLevel;
    }
    getOutputs() {
        return this.outputs;
    }
    setMaxReportLevelPrint(level) {
        this.maxReportLevelPrint = level;
    }
    getMaxReportLevelPrint() {
        return this.maxReportLevelPrint;
    }
    getStore() {
        return this.store;
    }
    getPlugins() {
        return this.plugins;
    }
    addPlugins(...plugins) {
        this.plugins = this.plugins.concat(plugins);
    }
    adjustFromCommandLine() {
        this.files = this.files.concat(this.commandLineConfiguration.getTestFiles() || []);
        this.logLevel = this.commandLineConfiguration.getVerbosity() || this.logLevel;
        this.plugins = [...new Set(this.plugins.concat(this.commandLineConfiguration.getPlugins() || []))];
        this.store = Object.assign({}, this.store, this.commandLineConfiguration.getStore());
        this.showPassingTests = this.commandLineConfiguration.getShowPassingTests();
        const filesIgnoringOthers = this.commandLineConfiguration.getTestFilesIgnoringOthers();
        if (filesIgnoringOthers && filesIgnoringOthers.length > 0) {
            this.files = filesIgnoringOthers;
        }
        if (this.commandLineConfiguration.getStdoutRequisitionOutput()) {
            this.outputs.push({ type: 'standard-output', format: 'console', name: 'command line report output' });
        }
        const fileMaxReportLevelPrint = this.commandLineConfiguration.getMaxReportLevelPrint();
        if (fileMaxReportLevelPrint !== undefined) {
            this.maxReportLevelPrint = fileMaxReportLevelPrint;
        }
    }
    adjustFromFile(filename) {
        if (filename !== undefined) {
            try {
                const fileConfiguration = new file_configuration_1.FileConfiguration(filename);
                if (fileConfiguration) {
                    this.parallel = fileConfiguration.isParallelExecution() || this.parallel;
                    this.logLevel = fileConfiguration.getLogLevel() || this.logLevel;
                    this.files = this.files.concat(fileConfiguration.getFiles());
                    this.outputs = this.outputs.concat(fileConfiguration.getOutputs());
                    this.plugins = this.plugins.concat(fileConfiguration.getPlugins());
                    this.store = Object.assign({}, fileConfiguration.getStore(), this.store);
                    const fileMaxReportLevelPrint = fileConfiguration.getMaxReportLevelPrint();
                    if (fileMaxReportLevelPrint !== undefined) {
                        this.maxReportLevelPrint = fileMaxReportLevelPrint;
                    }
                }
            }
            catch (err) {
                logger_1.Logger.error(err);
            }
        }
    }
    static printConfiguration() {
        console.log(prettyjson_1.default.render({ configuration: this.getInstance().getValues() }, prettyjson_config_1.getPrettyJsonConfig()));
    }
}
Configuration.loaded = false;
exports.Configuration = Configuration;
