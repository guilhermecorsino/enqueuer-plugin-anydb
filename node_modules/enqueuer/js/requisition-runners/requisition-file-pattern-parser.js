"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = require("../loggers/logger");
const glob = __importStar(require("glob"));
const requisition_file_parser_1 = require("./requisition-file-parser");
class RequisitionFilePatternParser {
    constructor(patterns) {
        this.patterns = patterns;
        this.filesErrors = [];
    }
    getFilesErrors() {
        return this.filesErrors;
    }
    parse() {
        this.filesErrors = [];
        const requisitions = [];
        const matchingFiles = this.getMatchingFiles();
        matchingFiles.forEach((file) => {
            try {
                requisitions.push(new requisition_file_parser_1.RequisitionFileParser().parseFile(file));
            }
            catch (err) {
                this.addError(`Error parsing file '${file}'`, err);
            }
        });
        if (matchingFiles.length === 0) {
            const title = `No test file was found`;
            this.addError(title, title);
        }
        return requisitions;
    }
    getMatchingFiles() {
        let result = [];
        this.patterns.map((pattern) => {
            const items = glob.sync(pattern);
            if (items.length > 0) {
                result = result.concat(items.sort());
            }
            else {
                const message = `No file was found with: '${pattern}'`;
                this.addError(message, message);
            }
        });
        result = [...new Set(result)];
        logger_1.Logger.info(`Files list: ${JSON.stringify(result, null, 2)}`);
        return result;
    }
    addError(title, message) {
        logger_1.Logger.error(message);
        this.filesErrors.push({ name: title, valid: false, description: message });
    }
}
exports.RequisitionFilePatternParser = RequisitionFilePatternParser;
