"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = require("../loggers/logger");
class HttpBearerAuthentication {
    constructor(authentication) {
        this.token = authentication.bearer.token;
    }
    generate() {
        return { 'authorization': 'Bearer ' + this.token };
    }
    verify(authorization) {
        const tests = [];
        try {
            const token = authorization.split(' ')[1];
            tests.push(this.authenticatePrefix(authorization.split(' ')[0]));
            tests.push(this.authenticateToken(token));
        }
        catch (err) {
            logger_1.Logger.error(`Error trying to authenticate: ${err}`);
        }
        tests.push(this.bearerAuthentication(tests));
        return tests;
    }
    bearerAuthentication(tests) {
        let test = {
            name: '"Bearer" authentication',
            valid: false,
            description: 'Fail to authenticate \'Bearer\' authentication'
        };
        if (tests.length > 0) {
            if (tests.every(test => test.valid)) {
                test.valid = true;
                test.description = `Bearer authentication is valid`;
            }
        }
        return test;
    }
    authenticatePrefix(prefix) {
        let test = {
            name: '"Bearer" authentication prefix',
            valid: false,
            description: `Prefix "Bearer" was not found in Bearer authentication. Got ${prefix} instead`
        };
        if (prefix == 'Bearer') {
            test.valid = true;
            test.description = `Prefix "Bearer" was found.`;
        }
        return test;
    }
    authenticateToken(token) {
        let test = {
            name: '"Bearer" authentication token',
            valid: false,
            description: `Token does not match. Got ${token} instead`
        };
        if (token == this.token) {
            test.valid = true;
            test.description = `Token match`;
        }
        return test;
    }
}
exports.HttpBearerAuthentication = HttpBearerAuthentication;
